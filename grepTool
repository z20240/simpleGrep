#!/usr/bin/perl

use feature qw(say state switch);
use Getopt::Long;
use Cwd            qw( abs_path );
use File::Basename;
use Data::Dumper;
use strict;

my ($type, $path, $next, $exclude_fpath, $exclude_file, $help);

GetOptions(
    "type=s" => \$type,
    "path=s" => \$path,
    "next=s" => \$next,
    "exclude-dir=s" => \$exclude_fpath,
    "exclude-file=s" => \$exclude_file,
    "help" => \$help
);

print "ZZ, t:$type, p:$path, n:$next, exclude-dir:$exclude_fpath, exclude-file:$exclude_file, h:$help\n";

if($help)
{
    usage();
    exit();
}

real($ARGV[0], $type , $path ,$next, $exclude_fpath, $exclude_file);

sub real {

    #會拿到四個參數
    my ($search , $fileType, $path, $grepNext, $exclude_fpath, $exclude_file) = @_;

    # 不再預設只搜尋這些檔案
    # $fileType //= 'perl,php,js,css,html,log,vue,ts,json';
    $path     ||= '*';
    $grepNext ||= '';

    my (@command_path , $command_fileType , $command_option , $command_search , $command_grepNext);

    # fileType 目前先設定 php perl js css html log json
    $command_fileType = processFileType($fileType, $exclude_fpath, $exclude_file);
    # path 目前設定
    #   . => 當下目錄
    #   指定目錄 => 完整目錄 ex ~/Desktop/XXX/XXX
    #   指定目錄 => 非完整目錄 ex ~/Downloads/XXX/XXX

    # 判斷要search 的 path
    # 有幾種情況
    @command_path = processpath($path);

    # 設定屬性
    $command_option = '-nsrHIi';

    # 要搜尋的字串
    $command_search = $search;

    # next command
    if ($grepNext) {
        $command_grepNext = " | grep --color=auto $grepNext ";
        $command_grepNext .= "| GREP_COLOR=\"1;33\" egrep --color=always '$grepNext' ";
    }

    # 產出command
    map {
        my $cmd = creatCommand($_ , $command_fileType , $command_option , $command_search , $command_grepNext);
        system($cmd);
        green_say("search done");
    } @command_path;
    # die;

}

sub processFileType {
    my ($fileType, $exclude_fpath, $exclude_file) = @_;
    my @types = split(',', $fileType);
    my $str;
    map {
        map {
            $str.= ' --include=\*.'.$_;
            $str.= ' --exclude=\*.min.'.$_;
            $str.= ' --exclude=\*.d.'.$_;
        } split(',', fileType2fileExt($_));
    } @types;

    map { $str.= ' --exclude-dir=' . $_ } split(',', $exclude_fpath) if $exclude_fpath;
    map { $str.= ' --exclude=' . $_ } split(',', $exclude_file) if $exclude_file;

    return $str;
}

sub fileType2fileExt {
    my ($fileType) = shift;
    my $out;

    my $fileTypeMap = {
        php =>  "php",
        perl => "pl,pm",
        js =>   "js",
        css =>  "css",
        html => "html",
        ts =>   "ts",
        vue =>  "vue",
        log =>  "log",
        json => "json",
        xml => "xml",
    };

    $out = $fileTypeMap->{$fileType} || $fileType;

    return $out if $out;
}

sub processpath {
    my $path = shift;

    if($path eq '.'){
        return ('*');
    } else {
        return split(',',$path);
    }

}

sub creatCommand {
    my ($command_path , $command_fileType , $command_option , $command_search , $command_grepNext) = @_;
    # 自動
    my $cmd = "grep $command_option '$command_search' $command_path $command_fileType --color=always $command_grepNext ";
    # $cmd .=   "| GREP_COLOR=\"1;36\" egrep --color=always \"^\\S+:\" ";
    # $cmd .=   "| GREP_COLOR=\"1;35\" egrep --color=always \":\\d+:\" ";
    $cmd .=   "| cut -c1-200 ";
    green_say($cmd);
    return $cmd;
}

sub green_say {
    my ($str) = @_;
    print "\033[1;32m$str\033[m\n";
}

sub usage {
    print <<".";

        [ -p / --path] 查詢路徑(預設為當下目錄)

        [ -n / --next ] 想查詢的下一個關鍵字
            可以在查找完一個關鍵字後，以此結果再查找下一個關鍵字.

        [ --exclude-dir ] 忽略此目錄下的檔案，可以使用 ',' 連接多個目錄

        [ --exclude-file ] 忽略此檔案，可以使用 ',' 連接多個檔案

        [ -t / --type ] 想查詢的檔案類型，可以使用 ',' 連結多個檔案類型
.
}
